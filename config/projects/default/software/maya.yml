#*********************************************************************
# content   = Maya config
# date      = 2024-11-24
#
# license   = MIT <https://github.com/alexanderrichtertd>
# author    = Alexander Richter <alexanderrichtertd.com>
#*********************************************************************

version: &MAYA_VERSION 2023
path:    &MAYA_PATH !join ["C:/Program Files/Autodesk/Maya", *MAYA_VERSION, /bin/maya.exe]

# start command
start: !join ['start "" "', *MAYA_PATH, '" {}']

# renderer:
# renderer_path:

# Added BEFORE software starts
ENV:
    MAYA_SCRIPT_PATH: 
        - $software/maya/scripts

    MAYA_PLUG_IN_PATH:
        - $software/maya/plugins

    # MAYA_SHELF_PATH:
    #     - $software/maya/scripts

    # SPLASHSCREEN & IMG PATH
    XBMLANGPATH:
        - $img/software/maya

    # DISABLE close reports
    MAYA_DISABLE_CIP: 1
    MAYA_DISABLE_CER: 1



#*********************************************************************
# MENU
#*********************************************************************
MENU:
    - project_name:
      - Open Scene Folder:   import pipefunc; pipefunc.open_folder(cmds.file(q=True, sceneName=True))
      - Open Project Folder: import pipefunc; pipefunc.open_folder(Tank().config_project['PATH']['project'])
      - break:               
      - Reload Pipeline:     print('reload pipeline')

    - break:

    - Save: import arSave; arSave.start()
    - Load: import arLoad; arLoad.start()

    - break:

    - Animation:
      - Playblast: from ANIM import playblast;playblast.start()

    - Light:
      - Light Linker: from LGT import light_linker;import importlib;importlib.reload(light_linker);light_linker.start()

    - Render:
      - Rendersetting - Work:    Tank().scene_setup("render", "work")
      - Rendersetting - Publish: Tank().scene_setup("render", "publish")

    - break: 

    - Report: from tank import Tank; Tank().help("report")
    - Help:   from tank import Tank; Tank().help()



# #*********************************************************************
# # SHELF
# #*********************************************************************
# SHELF:
#   HEADER:
#     - save:    l="Save", command="import arSave; import importlib;importlib.reload(arSave); arSave.start()", dcc=", image="shelf_save.png"
#     - load:    l="Load", command="import arLoad; import importlib;importlib.reload(arLoad); arLoad.start()", dcc=", image="shelf_load.png"
#     - break:   width=1, l="break", command="print("empty")", dcc=", image="separator.png"

#     - folder:  l="Project Folder", command="import webbrowser; webbrowser.open(os.path.dirname(Tank().software.scene_path))", dcc=", image="shelf_open_folder.png"
#     - folder:  l="Project Folder", command="import pipefunc; pipefunc.open_folder(Tank().config_project["path"])", dcc=", image="shelf_open_folder_project.png"

#     - break:   width=1, l="break", command="print("empty")", dcc=", image="separator.png"

#   FOOTER:
#     - break:   width=1, l="break", command="print("empty")", dcc=", image="separator.png"

#     - rs_publish:  l="Rendersetting - Work", command="Tank().software.scene_setup("RENDER", "WORK")", dcc=", image="shelf_render_work.png"
#     - rs_publish:  l="Rendersetting - Preview", command="Tank().software.scene_setup("RENDER", "PREVIEW")", dcc=", image="shelf_render_preview.png"
#     - rs_publish:  l="Rendersetting - Publish", command="Tank().software.scene_setup("RENDER", "DELIVER")", dcc=", image="shelf_render_deliver.png"

#     - break:   width=1, l="break", command="print("empty")", dcc=", image="separator.png"

#     - report:  l="Report", command="from tank import Tank;Tank().help("report")", dcc=", image="shelf_report.png"
#     - help:    l="Help", command="from tank import Tank;Tank().help()", dcc=", image="shelf_help.png"

# #*****************************************************************************************************************************

#   GEO:
#     - temp: l="Nothing", command="print("nothing")", dcc=", image="shelf_default.png"

#   SHD:
#     - temp: l="Nothing", command="print("nothing")", dcc=", image="shelf_default.png"

#   RIG:
#     - temp: l="Nothing", command="print("nothing")", dcc=", image="shelf_default.png"

#   LAY:
#     - snap:      l="Snap to first selection", command="import maya_utils;import importlib;importlib.reload(maya_utils); maya_utils.position_selected()", dcc=", image="shelf_snap.png"
#     - playblast: l="Playblast", command="from ANIM import playblast;import importlib;importlib.reload(playblast); playblast.start()", dcc=", image="shelf_playblast.png"

#   ANIM:
#     - snap:      l="Snap to first selection", command="import maya_utils;import importlib;importlib.reload(maya_utils); maya_utils.position_selected()", dcc=", image="shelf_snap.png"
#     - playblast: l="Playblast", command="from ANIM import playblast;import importlib;importlib.reload(playblast); playblast.start()", dcc=", image="shelf_playblast.png"

#   LIGHT:
#     - render_work:    l="Rendersettings - Work", command="Tank().software.scene_setup("RENDER", WORK")", dcc=", image="shelf_render_work.png"
#     - render_preview: l="Rendersettings - Work", command="Tank().software.scene_setup("RENDER", "PREVIEW")", dcc=", image="shelf_render_preview.png"
#     - render_deliver: l="Rendersettings - Work", command="Tank().software.scene_setup("RENDER", "DELIVER")", dcc=", image="shelf_render_deliver.png"
#     - break:          width=1, l="break", command="print("empty")", dcc=", image="separator.png"
#     - light_linker:   l="Light Linker", command="from LGT import light_linker;import importlib;importlib.reload(light_linker);light_linker.start()", dcc=", image="shelf_light_linker.png"



# #*********************************************************************
# # RENDER
# #*********************************************************************
# RENDER:

#   DEFAULT:
#     # - defaultArnoldRenderOptions.AASamples: 2
#     - " : "

#   WORK:
#     - " : "


#   PREVIEW:
#     - " : "


#   DELIVER:
#     - " : "


#   CUSTOM:
#     - " : "



# #*********************************************************************
# # SETUP
# #*********************************************************************
# SETUP:

#   DEFAULT:
#     # - defaultResolution.width  : Tank().config_project["resolution"][0]
#     # - defaultResolution.height : Tank().config_project["resolution"][1]

#     - defaultRenderGlobals.animation : 1
#     - defaultRenderGlobals.putFrameBeforeExt : 1
#     - defaultRenderGlobals.extensionPadding : 4
#     # - FPS : 24: film
#     # - unit : cm

#   GEO:


#   SHD:


#   RIG:


#   LAY:


#   ANIM:


#   LIGHT:



# #*********************************************************************
# # EXTRAS
# #*********************************************************************
# GROUPS:
#     ANIM_GRP:
#       - char_GRP
#       - props_GRP
#       - fx_GRP
#     LAYOUT:
#       - props_GRP
#       - sets_GRP
#     CAM_GRP:
#       - "
#     REVIEW_GRP:
#       - proxy_GRP
#       - playblast_GRP
